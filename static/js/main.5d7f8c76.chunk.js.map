{"version":3,"sources":["../node_modules/@giphy/js-brand/dist sync","components/GiphySearch.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","GiphySearch","submitHandler","props","onSearchChange","state","userQuery","changeHandler","bind","this","setState","target","value","Form","onSubmit","Input","placeholder","onChange","Button","attached","color","onClick","React","Component","gf","GiphyFetch","process","App","contextRef","createRef","myRef","handleGifClick","handleSearchChange","gridResults","width","columns","fetchGifs","offset","trending","limit","onGifClick","gif","modalGif","undefined","preventDefault","fetchGifs2","search","className","ref","Sticky","context","Segment","Group","floated","Header","as","textAlign","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d7f8c76.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 339;","import React from 'react';\r\nimport { Button, Form, Input } from 'semantic-ui-react'\r\n\r\nclass GiphySearch extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n        this.submitHandler = this.submitHandler.bind(this);\r\n        this.state = { userQuery: '' }\r\n    }\r\n\r\n    async changeHandler(e) {\r\n        await this.setState({userQuery: e.target.value});\r\n    }\r\n\r\n    submitHandler = () => this.props.onSearchChange(this.state.userQuery);\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.submitHandler}>\r\n                <Input placeholder='Search...' onChange={this.changeHandler} />\r\n                <Button attached='right' color='purple' onClick={this.submitHandler}>Search</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GiphySearch;","import React, { Component, createRef } from 'react';\r\nimport './App.css';\r\nimport GiphySearch from './components/GiphySearch';\r\nimport { Gif, Grid } from '@giphy/react-components'\r\nimport { GiphyFetch } from '@giphy/js-fetch-api'\r\nimport { Header, Segment, Sticky } from 'semantic-ui-react'\r\n\r\n//Not technically a secure way to do this, though for a public API it mimics the concept of pulling the API key from some other place/\r\nconst gf = new GiphyFetch(process.env.REACT_APP_GIPHY_APIKEY);\r\n\r\n\r\nclass App extends Component {\r\n  contextRef = createRef()\r\n  constructor() {\r\n    super();\r\n\r\n    this.myRef = React.createRef();\r\n    this.handleGifClick = this.handleGifClick.bind(this);\r\n    this.handleSearchChange = this.handleSearchChange.bind(this);\r\n    this.state = { //Adding this to the state due to static nature of the Giphy Grid.\r\n      gridResults: <Grid width={1000} columns={3} fetchGifs={(offset) => gf.trending({ offset, limit: 10 })} onGifClick={(gif, e) => {this.handleGifClick(gif,e)}} />,\r\n      modalGif: undefined\r\n    }\r\n  }\r\n\r\n  handleGifClick(gif, e) {\r\n    e.preventDefault();\r\n    this.setState({modalGif: gif});\r\n  }\r\n\r\n  async handleSearchChange(userQuery) {\r\n    const fetchGifs2 = (offset) => gf.search(userQuery, { offset, limit: 10 });\r\n    \r\n    //Normally would just update the state for the grid, but the Giphy Grid won't update once rendered, so gotta clear it, then add a new one.\r\n    await this.setState({\r\n      gridResults: null,\r\n    })\r\n\r\n    await this.setState({\r\n      gridResults: <Grid width={1000} columns={3} fetchGifs={fetchGifs2} onGifClick={(gif, e) => {this.handleGifClick(gif,e)}} />,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='App' ref={this.contextRef}>\r\n        <Sticky context={this.contextRef} >\r\n          <Segment attached='top'>\r\n            <div className='App-header'>\r\n              <Segment.Group>\r\n                <Segment floated='left' className='App-content'>\r\n                  <Header as='h1' color='purple'>Devin's Giphy Search Page</Header>\r\n                  <GiphySearch onSearchChange={this.handleSearchChange} />\r\n                </Segment>\r\n                <Segment textAlign='right' floated='right' className='App-content'>\r\n                  <Header as='h4' color='purple'>Devin Youngman</Header>\r\n                  <a className=\"App-link\" href=\"mailto:devin.youngman@gmail.com\" target=\"_blank\" rel=\"noopener noreferrer\">Email</a><br />\r\n                  <a className=\"App-link\" href=\"https://www.linkedin.com/in/dyoungman/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a><br />\r\n                  <a className=\"App-link\" href=\"https://github.com/dyoungman/giphy\" target=\"_blank\" rel=\"noopener noreferrer\">Github Repo</a>\r\n                </Segment>\r\n              </Segment.Group>\r\n            </div>\r\n          </Segment>\r\n        </Sticky>\r\n        <Segment attached='bottom'>\r\n          <div className='App-footer'>\r\n            {this.state.gridResults}\r\n            {this.state.modalGif && (\r\n              <div className='App-modal'\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.setState({modalGif: undefined});\r\n                }}\r\n              >\r\n                <Gif gif={this.state.modalGif} width={500} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Segment>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}